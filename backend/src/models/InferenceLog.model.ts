import mongoose, { Document, Schema } from "mongoose";

/**
 * @swagger
 * components:
 *   schemas:
 *     InferenceLog:
 *       type: object
 *       description: Logs production inferences for active learning analysis
 *       properties:
 *         _id:
 *           type: string
 *           description: Unique identifier for the inference log
 *         conversationId:
 *           type: string
 *           description: Reference to the conversation this inference belongs to
 *         userId:
 *           type: string
 *           description: User who made the query (optional for guests)
 *         userQuery:
 *           type: string
 *           description: The original user query
 *         expertPredictions:
 *           type: object
 *           description: Predictions and confidence scores from each expert
 *         finalResponse:
 *           type: string
 *           description: The final response generated by the system
 *         confidenceScore:
 *           type: number
 *           description: Overall confidence score for the inference
 *         isAmbiguous:
 *           type: boolean
 *           description: Whether this inference was flagged as ambiguous
 *         ambiguityReason:
 *           type: string
 *           description: Reason for ambiguity (low confidence, near-equal scores, etc.)
 *         userFeedback:
 *           type: string
 *           description: User rating (up/down) if provided
 *         contextSnippet:
 *           type: string
 *           description: Relevant context for the query
 *         timestamp:
 *           type: string
 *           format: date-time
 *           description: When the inference was made
 *       required:
 *         - userQuery
 *         - expertPredictions
 *         - finalResponse
 *         - confidenceScore
 */

/**
 * Individual expert prediction with confidence score
 */
export interface IExpertPrediction {
  expert: string;
  response: string;
  confidenceScore: number;
  processingTime: number;
}

/**
 * Represents a logged inference for active learning analysis
 */
export interface IInferenceLog extends Document {
  conversationId?: mongoose.Types.ObjectId;
  userId?: mongoose.Types.ObjectId;
  userQuery: string;
  expertPredictions: IExpertPrediction[];
  finalResponse: string;
  confidenceScore: number;
  isAmbiguous: boolean;
  ambiguityReason?: string;
  userFeedback?: "up" | "down";
  contextSnippet?: string;
  metadata: {
    propertyCount?: number;
    queryComplexity?: number;
    responseLatency?: number;
  };
  timestamp: Date;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Schema for expert predictions
 */
const ExpertPredictionSchema: Schema = new Schema({
  expert: { type: String, required: true },
  response: { type: String, required: true },
  confidenceScore: { type: Number, required: true, min: 0, max: 1 },
  processingTime: { type: Number, required: true }, // in milliseconds
});

/**
 * Schema for inference logs
 */
const InferenceLogSchema: Schema = new Schema(
  {
    conversationId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Conversation",
      index: true,
    },
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      index: true,
    },
    userQuery: { type: String, required: true, index: "text" },
    expertPredictions: [ExpertPredictionSchema],
    finalResponse: { type: String, required: true },
    confidenceScore: { type: Number, required: true, min: 0, max: 1, index: true },
    isAmbiguous: { type: Boolean, default: false, index: true },
    ambiguityReason: { type: String },
    userFeedback: { type: String, enum: ["up", "down"] },
    contextSnippet: { type: String },
    metadata: {
      propertyCount: { type: Number },
      queryComplexity: { type: Number },
      responseLatency: { type: Number },
    },
    timestamp: { type: Date, default: Date.now, index: true },
  },
  {
    timestamps: true,
    collection: "inference_logs",
  }
);

// Compound indexes for efficient querying
InferenceLogSchema.index({ isAmbiguous: 1, confidenceScore: 1 });
InferenceLogSchema.index({ timestamp: -1, isAmbiguous: 1 });
InferenceLogSchema.index({ userQuery: "text", isAmbiguous: 1 });

export default mongoose.model<IInferenceLog>("InferenceLog", InferenceLogSchema);