# Copyright (c) 2025 Son Nguyen

name: Analyze Lines of Code in All Repos

# Note: This workflow is just for me to track the lines of code across all my repositories (@hoangsonww)!
# Not really related to this repository, but useful for me to see my own personal stats...

on:
  schedule:
    - cron: "0 0 * * 0"     # weekly on Sunday @ midnight UTC
  workflow_dispatch:        # manual trigger
  push:
    branches:
      - master              # on push to master
  pull_request:             # on all PRs

jobs:
  count-lines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq cloc locales
          sudo locale-gen en_US.UTF-8

      - name: Validate GH_PAT secret
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -z "$GH_PAT" ]; then
            echo "❌ GH_PAT is not set! Create a repo secret named GH_PAT with a PAT that has repo scope."
            exit 1
          fi

      - name: Fetch & clone all owned repos (public only)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          RESPONSE=$(curl -sSL -H "Authorization: token $GH_PAT" \
            "https://api.github.com/user/repos?visibility=all&affiliation=owner&per_page=100")

          REPOS=$(echo "$RESPONSE" | jq -r '.[].full_name')

          mkdir -p all-repos && cd all-repos

          for REPO in $REPOS; do
            CLONE_URL="https://x-access-token:$GH_PAT@github.com/$REPO.git"
            DEFAULT_BRANCH=$(curl -sSL -H "Authorization: token $GH_PAT" \
              "https://api.github.com/repos/$REPO" \
              | jq -r '.default_branch // "main"')
            echo "Cloning $REPO (branch: $DEFAULT_BRANCH)…"
            git clone --depth 1 --branch "$DEFAULT_BRANCH" \
              "$CLONE_URL" "$(basename $REPO)" \
              || echo "⚠️ Failed to clone $REPO"
          done

      - name: Calculate lines of code
        run: |
          cloc all-repos --json > cloc-output.json

      - name: Print stats
        run: |
          TOTAL=$(jq '.SUM.code // 0' cloc-output.json)
          JS=$(jq '.JavaScript.code // 0' cloc-output.json)
          HTML=$(jq '.HTML.code // 0' cloc-output.json)
          TS=$(jq '.TypeScript.code // 0' cloc-output.json)
          JSX=$(jq '.JSX.code // 0' cloc-output.json)
          PY=$(jq '.Python.code // 0' cloc-output.json)
          JAVA=$(jq '.Java.code // 0' cloc-output.json)
          GO=$(jq '.Go.code // 0' cloc-output.json)
          RUBY=$(jq '.Ruby.code // 0' cloc-output.json)
          CSS=$(jq '.CSS.code // 0' cloc-output.json)
          PHP=$(jq '.PHP.code // 0' cloc-output.json)
          CSHARP=$(jq '."C#".code // 0' cloc-output.json)
          VUE=$(jq '."Vuejs Component".code // 0' cloc-output.json)
          JNB=$(jq '."Jupyter Notebook".code // 0' cloc-output.json)
          CPP=$(jq '."C++".code // 0' cloc-output.json)
          SWIFT=$(jq '.Swift.code // 0' cloc-output.json)
          C=$(jq '.C.code // 0' cloc-output.json)
          DOCKER=$(jq '.Dockerfile.code // 0' cloc-output.json)
          R=$(jq '.R.code // 0' cloc-output.json)
          HCL=$(jq '.HCL.code // 0' cloc-output.json)
          SQL=$(jq '.SQL.code // 0' cloc-output.json)
          RUST=$(jq '.Rust.code // 0' cloc-output.json)
          KOTLIN=$(jq '.Kotlin.code // 0' cloc-output.json)
          SCALA=$(jq '.Scala.code // 0' cloc-output.json)
          PERL=$(jq '.Perl.code // 0' cloc-output.json)
          DART=$(jq '.Dart.code // 0' cloc-output.json)
          XML=$(jq '.XML.code // 0' cloc-output.json)
          JSON=$(jq '.JSON.code // 0' cloc-output.json)
          YAML=$(jq '.YAML.code // 0' cloc-output.json)
          SHELL=$(jq '."Bourne Shell".code // 0' cloc-output.json)
          MAKE=$(jq '.make.code // 0' cloc-output.json)

          LISTED=$((JS + HTML + TS + JSX + PY + JAVA + GO + RUBY + CSS + PHP + CSHARP + VUE + \
                     JNB + CPP + SWIFT + C + DOCKER + R + HCL + SQL + RUST + KOTLIN + SCALA + \
                     PERL + DART + XML + JSON + YAML + SHELL + MAKE))
          OTHER=$((TOTAL - LISTED))
          if [ "$OTHER" -lt 0 ]; then OTHER=0; fi

          format() { export LC_ALL="en_US.UTF-8"; printf "%'d" "$1"; }
          percent() { awk -v n="$1" -v d="$2" 'BEGIN{ if(d==0) printf "0.00"; else printf "%.2f", (n/d)*100 }'; }
          pline() { # label, value
            printf "%-16s: %s (%s%%)\n" "$1" "$(format "$2")" "$(percent "$2" "$TOTAL")"
          }

          echo "====== Lines of Code Summary ======"
          pline "JavaScript"       "$JS"
          pline "TypeScript"       "$TS"
          pline "JSX"              "$JSX"
          pline "HTML"             "$HTML"
          pline "Python"           "$PY"
          pline "Java"             "$JAVA"
          pline "Go"               "$GO"
          pline "Ruby"             "$RUBY"
          pline "CSS"              "$CSS"
          pline "PHP"              "$PHP"
          pline "C#"               "$CSHARP"
          pline "Vue.js"           "$VUE"
          echo ""
          pline "Jupyter Notebook" "$JNB"
          pline "C++"              "$CPP"
          pline "Swift"            "$SWIFT"
          pline "C"                "$C"
          pline "Dockerfile"       "$DOCKER"
          pline "R"                "$R"
          pline "HCL"              "$HCL"
          pline "SQL"              "$SQL"
          echo ""
          pline "Rust"             "$RUST"
          pline "Kotlin"           "$KOTLIN"
          pline "JSON"             "$JSON"
          pline "XML"              "$XML"
          pline "YAML"             "$YAML"
          pline "Bourne Shell"     "$SHELL"
          pline "Makefile"         "$MAKE"
          echo ""
          pline "Other"            "$OTHER"
          echo "-----------------------------------"
          echo "Total Lines      : $(format "$TOTAL")"
